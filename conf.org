#+title emacs_config_file
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :makedirp yes

* functions
** org_function
*** default
  #+begin_src emacs-lisp
    (defun org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))
  #+end_src
  
*** layout
#+begin_src emacs-lisp
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 130
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
#+end_src

*** tangle
#+begin_src emacs-lisp
      (defun org-babel-tangle-config ()
        (when (string-equal (buffer-file-name)
                            (expand-file-name "~/.emacs.d/conf.org"))
          (let ((org-confirm-babel-evaluate nil))
            (org-babel-tangle))))
#+end_src

** development
*** header
#+begin_src emacs-lisp
   (defun lsp-mode-setup ()
     (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
     (lsp-headerline-breadcrumb-mode))
#+end_src

** terminals
*** eshell
#+begin_src emacs-lisp
  (defun configure-eshell ()
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)           ; save history
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)   ; performance increase
    ;; keybindings
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))
#+end_src

* basic_settings
** package_management
*** package_ressources
#+begin_src emacs-lisp
  (require 'package)
  ;; package_ressources
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  ;; package_updates
  (unless package-archive-contents
    (package-refresh-contents))                                         
#+end_src

*** use_package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** ui_management
*** basics
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)        ; start with a blank page
  (setq visible-bell t)                   ; set visible bell
  (scroll-bar-mode -1)                    ; disable visible scrollbar
  (tool-bar-mode -1)                      ; disable the toolbar
  (tooltip-mode -1)                       ; disable tooltips
  (set-fringe-mode 10)                    ; breathing room
  (menu-bar-mode -1)                      ; disable the menu bar
#+end_src

*** font
#+begin_src emacs-lisp
  (set-face-attribute 'fixed-pitch nil :font "Cantarell" :height 95)                      ; fixed pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 105 :weight 'regular) ; variable pitch face
#+end_src

*** mode_line
**** doom
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom(doom-modeline-height 15))
  (use-package rainbow-delimiters                                         
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

**** icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

**** theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-dracula t))
#+end_src

*** numbering and highlighting
#+begin_src emacs-lisp
  (global-hl-line-mode +1)                ; highlighting on
  (column-number-mode)                    ; numbering on
  (global-display-line-numbers-mode t)
  (dolist(mode '(org-mode-hook            ; disable for orgmode
                 term-mode-hook           ; disable for term mode
                 shell-mode-hook          ; disable for shell
                 treemacs-mode-hook       ; disable for treemacs
                 eshell-mode-hook))       ; disable for eshell
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** autocompletion
**** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
    :config
      (ivy-mode 1))
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

**** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))              ; do not start searches with ^
#+end_src

#+RESULTS:
: counsel-minibuffer-history

**** swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t)
#+end_src

**** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

**** helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** keybinding
*** general
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)                 ; esc quits out of modes
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer leader-key
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))
  (leader-key 
      "t" '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

*** evil_mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;; use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* file_management
** dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
  (use-package dired-single)
#+end_src

** icon
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** backup
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/backup")))
#+end_src
* development
** languages
*** server
#+begin_src emacs-lisp
      (use-package lsp-mode
        :commands (lsp lsp-deferred)
        :hook (lsp-mode . lsp-mode-setup)
        :init
        (setq lsp-keymap-prefix "C-c l")
        :config
        (lsp-enable-which-key-integration t))
      (use-package lsp-ui
        :hook (lsp-mode . lsp-ui-mode)
        :custom
        (lsp-ui-doc-position 'bottom))
      (use-package lsp-treemacs
        :after lsp)
      (use-package lsp-ivy)
#+end_src

*** javascript
#+begin_src emacs-lisp
      (use-package typescript-mode
        :mode "\\.js\\'"
        :hook (typescript-mode . lsp-deferred)
        :config
        (setq typescript-indent-level 2)
        (require 'dap-node)
        (dap-node-setup))
#+end_src

*** python
#+begin_src emacs-lisp
    (use-package python-mode
      :ensure t
      :hook (python-mode . lsp-deferred)
      :config
      (python-shell-interpreter "python3")
      (dap-python-executable "python3")
      (dap-python-debugger 'debugpy)
      (require 'dap-python))
#+end_src

*** python_environment
#+begin_src emacs-lisp
  (use-package pyvenv
    :config
    (pyvenv-mode 1))
#+end_src

*** go
#+begin_src emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'"
    :hook (go-mode . lsp-deferred)
    :config
    (setq go-indent-level 2)
    (require 'dap-go)
    (dap-go-setup))
#+end_src

*** yaml
#+begin_src emacs-lisp
    (use-package yaml-mode
      :mode "\\.yml\\'"
      :hook (yaml-mode . lsp-deferred))
#+end_src

*** css-mode
#+begin_src emacs-lisp
  (use-package css-mode
    :mode "\\.css\\'"
    :hook (css-mode . lsp-deferred)
    :config
    (setq css-indent-level 2))
#+end_src

** environment
*** autopairs
#+begin_src emacs-lisp
  (use-package smartparens
    :diminish smartparens-mode
    :init
    (require 'smartparens-config)
    :config
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    (setq sp-show-pair-from-inside t))
#+end_src

*** autocompletion/company
#+begin_src emacs-lisp
    (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection))
            (:map lsp-mode-map
                  ("<tab>" . company-indent-or-complete-common))
            :custom
            (company-minimum-prefix-length 1)
            (company-idle-delay 0.0))
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** debugger
#+begin_src emacs-lisp
  (use-package dap-mode
    :hook (dab-stopped . (lambda (arg) (call-interactively #'dab-hydra)))
    :custom
    (dap-auto-configure-features '(sessions locals tooltip)))
#+end_src

** git_management
*** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-switch-project-action #'projectile-dired))
  (use-package counsel-projectile                                   ; ivy_integration
    :config (counsel-projectile-mode))
#+end_src

*** magit
#+begin_src emacs-lisp
    (use-package magit
      :commands (magit-status magit-get-current-branch)
      :custom 
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
      (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
#+end_src

*** forge
#+begin_src emacs-lisp
  (use-package forge
    :after magit
    :init 
    (setq auth-sources '("~/.authinfo")))
#+end_src

* terminals
** term
#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#$>\n]*[#$%>] *"))
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))
#+end_src

** eshell
#+begin_src emacs-lisp
  (use-package eshell-git-prompt)
  (use-package eshell
    :hook (eshell-first-time-mode . configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'powerline))
#+end_src

* org_mode
** basic/ agenda
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)                            ; log the agenda
    (setq org-log-done 'time)                                          ; logs time in the agenda
    (setq org-log-into-drawer t)
    (setq org-agenda-files 
          '("~/git_hub_projects/00_private/00_agenda/priv_org.org"))   ; task_file_locations
    (setq org-todo-keywords                                            ; agenda_keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
    (setq org-refile-targets
          '(("priv_archive.org" :maxlevel . 1)
            ("priv_org.org" :maxlevel . 1)))
    ;; save org-buffers after refiling
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (setq org-tag-alist                                                 ; set predefined tags
          '((:startgroup)
            ; put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
    (setq org-agenda-custom-commands                                    ; set agenda custom defaults
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))
            ("W" "Work Tasks" tags-todo "+work-email")
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))
            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files))))))))
#+end_src

** bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   ;; replace - with . in list
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** ui
*** header
#+begin_src emacs-lisp
  (with-eval-after-load 'org-faces 
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))
  ;; fixed pitch in variable pitch mode
  (with-eval-after-load 'org-faces
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

*** layout
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))
#+end_src

** config
*** auto-save
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

*** strcture_templates
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("db" . "src sql"))
  (add-to-list 'org-structure-template-alist '("lu" . "src lua"))
#+end_src

*** languagess
#+begin_src emacs-lisp
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (python . t)
           (sql . t)
           (lua .t)))
        (setq org-confirm-babel-evaluate nil)
#+end_src
